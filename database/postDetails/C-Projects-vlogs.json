{
    "posts": [
      {
        "id": 1,
        "heading": "Number To Text ",
        "aboutimage": "text_to_number1.jpg",
        "aboutdescription": "The provided C code effectively converts a given number into its word representation. It employs a systematic approach that involves breaking down the number into its constituent digits, analyzing their place values, and mapping them to corresponding words.<br><br>The code begins by prompting the user to enter a number within a specified range. It then calculates the number of digits in the input and enters a loop to process each digit. For each digit, the code determines its place value and uses a switch statement to map it to its corresponding word. Single digits are directly mapped to their respective words, while two-digit combinations are mapped to their specific words. For higher digits, the code extracts the appropriate place value word.<br><br>The code handles numbers up to billions and ensures that it captures the nuances of the English language, including the irregular forms for numbers 11 to 19. It offers a clear and concise output, making it a valuable tool for various applications.",
        "breakdownimage": "text_to_number2.jpg",
        "breakdowndescription": "<br><br><h4>1. Header Inclusion:</h4>#include <stdio.h>: Includes the standard input/output library for input and output operations.<br><br><h4>2. Main Function:</h4>int main(): Defines the main entry point of the program.<br><br><h4>3. Variable Declarations:</h4>long int num, count = 0, i, rem = 1, sem = 0, be, le = 0, n, k = 1, je, bem, ne = 1, ke;: Declares various variables of type long int to store the input number, counters, remainders, temporary values, and other intermediate calculations.<br><br><h4>4. Input Prompt:</h4>printf(\" (0-2147483647)\");: Prints a message indicating the valid input range for the number.<br>printf(\" Enter a number in the above range : \");: Prompts the user to enter a number within the specified range.<br>scanf(\"%ld\",num);: Reads the input number from the user and stores it in the num variable.<br><br><h4>5. Counting Digits:</h4>be = num;: Stores a copy of the input number in be for later use.<br>while(num) { num = num / 10; count++; }: Iteratively divides the input number by 10 and increments the count variable until the number becomes 0. This counts the total number of digits in the input.<br><br><h4>6. Number Conversion and Printing:</h4>while(count > 0) { ... }: This loop iterates as long as there are remaining digits to process.<br><br><h4>7. Single Digit Case:</h4>if(count == 1 || count == 3 || count == 4 || count == 6 || count == 8 || count == 10) { ... }: Checks if the current digit is in the units, hundreds, thousands, lakhs, crores, or billions place.<br>for(i=1;i <count;i++) { le++; rem=rem*10; }: Calculates the appropriate multiplier (rem) based on the digit's place value. sem=be / rem;: Extracts the current digit from the remaining number.<br>while(bem!=0) { ... }: Iterates until the current digit is fully processed.<br>switch(sem) { ... }: Uses a switch statement to print the corresponding word for the current digit (e.g., \"One\" , \"Two\" , etc.).<br><br><h4>8. Two-Digit Case:</h4>if(ne==0) { ... }: Checks if the current digit is the first digit of a two-digit number.<br>switch(ke) { ... }: Prints the word for the single-digit number. else { ... }: Checks if the current digit is the second digit of a two-digit number.<br>switch(sem) { ... }: Prints the word for the two-digit number (e.g., \"Ten\" , \"Eleven\" , etc.).<br><br><h4>9. Higher Digit Cases:</h4>for(i=1;i < count-1;i++) { le++; rem=rem*10; }: Calculates the multiplier for higher-digit numbers.<br>sem=be / rem;: Extracts the current digit or two-digit number. switch(sem) { ... }: Prints the word for the higher-digit number (e.g., \"Hundred\" , \"Thousand\" , etc.).<br><br><h4>10. Remaining Digits:</h4>bem=sem; while(bem!=0) { ... }: Processes any remaining digits. switch(count) { ... }: Prints the appropriate word for the place value (e.g., \"Hundred\" , \"Thousand\" , etc.). <br>k=sem; for(n=1;n < count;n++) { k=k*10; }: Calculates the multiplier for the remaining digits. be=be-k; count=le; le=0; k=1; ne=1;: Updates the remaining number, counter, and other variables for the next iteration.<br><br><h4>11. Return Value:</h4>return 0;: Indicates successful program execution.",
        "link": "projects-detailed.html"
      },
      {
        "id": 2,
        "heading": "Text To Star Pattern ",
        "aboutimage": "Text_To_Star_Pattern1.jpg",
        "aboutdescription": "The provided C code is a program that prints out a stylized representation of a user's name using ASCII characters. It takes the user's name as input and then displays each letter in a unique, blocky font style. The code includes necessary headers, declares variables, prompts the user for input, iterates through the name, prints the corresponding stylized letter for each character, and waits for user input before exiting. It demonstrates basic C programming concepts like input/output, loops, conditional statements, and character arrays.",
        "breakdownimage": "Text_To_Star_Pattern2.jpg",
        "breakdowndescription": "<br><br><h4>1. Include necessary headers:</h4>stdio.h: Provides standard input/output functions like printf and scanf.<br>conio.h: Provides console input/output functions like getch().<br><br><h4>2. Define the main function:</h4>The main function is the entry point of the program.<br><br><h4>3. Declare variables:</h4>char ch, i, k[999]:<br>ch: Stores the current character being processed.<br>i: Used as a loop counter.<br>k[999]: An array to store the user's name.<br>int n: Stores the number of characters in the user's name.<br><br><h4>4. Clear the screen:</h4>system(\"CLS\"): Clears the console screen.<br><br><h4>5. Prompt for input:</h4>The code prompts the user to enter their name and the number of characters.<br><br><h4>6. Read input:</h4>gets(k): Reads the user's name into the k array.<br>scanf(\"%d\", &n): Reads the number of characters into n.<br><br><h4>7. Iterate through the name:</h4>A for loop iterates from 0 to n-1 to process each character.<br><br><h4>8. Print corresponding letter:</h4>For each character:<br>Checks if the character matches a specific letter (A-Z or a-z).<br>If a match is found, prints the corresponding stylized representation using printf.<br> If the character is a space, prints two blank lines.<br><br><h4>9. Wait for user input:</h4>getch() waits for the user to press any key before exiting.",
        "link": ""
      }
    ]
  }



